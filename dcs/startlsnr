#!/bin/sh
################################################################################
#                                                                              #
#   Copyright (c) 2004                                                         #
#   RedPrairie Corporation                                                     #
#   All Rights Reserved                                                        #
#                                                                              #
#   The information in this file contains trade secrets and confidential       #
#   information which is the property of RedPrairie Corporation.               #
#                                                                              #
#   All trademarks, trade names, copyrights and other intellectual property    #
#   rights created, developed, embodied in or arising in connection with       #
#   this software shall remain the sole property of RedPrairie Corporation.    #
#                                                                              #
#   Copyright (c) RedPrairie Corporation, 2004                                 #
#   ALL RIGHTS RESERVED                                                        #
#                                                                              #
################################################################################

################################################################################
#                                                                              #
#      SCRIPT NAME:     startlsnr                                              #
#                                                                              #
#      DESCRIPTION:     wrapper for Talkman listener daemon                    #
#                       Note this script is used in demo/testing purposes      #
#                       and not on production environment                      #
#                                                                              #
#   RELEASE  DATE     BY   PROJ   ID       DESCRIPTION                         #
#   ======== ======== ==== ====== ======== =============                       #
#   dcs 800  27/01/03 DL   DCS    NEW6488  Voice Stock Checking.               #
#   2005.1.1 15/06/05 DL   DCS    PDR9614  Voice compilation issues            #
#   2005.1.2 19/07/05 DL   DCS    NEW7841  Voice system directed enhancements  #
#   2005.2.0 21/09/05 DL   DCS    PDR9688  Voice addition of licencing checks  #
#   2006.1.1 22/05/06 DL   DCS    BUG2638  Voice miscellaneous bugs            #
#   2007.1.2 02/08/07 DL   DCS    DSP1275  Voice thread stack size problem     #
#   2009.1.0 11/03/09 DL   DCS    DSP2331  Voice Oracle SQL Tracing            #
#   2012.2.1 16/10/12 DL   DCS    DSP5622  Voice Grid Picking - Auto           #
#                                          Relocation & Labor Extract Issues   #
#   2012.2.1  26/10/12 DL  DCS    DSP5712  Voice Setup Package Logging         #
################################################################################

if [ "$MTYPE" = "LINUX" ]
then
        alias echo="echo -e"
fi


usage()
{
 
        echo ""
        echo "Usage: $PROG [options]"
        echo ""
	echo "[-a]\tALL workstation logging ENABLED"
        echo "[-d]\tDebug Mode (Development Environment only)"
	echo "[-e]\tExtended debug mode (warning - produces a lot of data)"
        echo "[-f]\tFile for logging"
        echo "[-i]\tInput Field Separator Character FROM Voice Unit (default = ,)"
        echo "[-o]\tOutPut Field Separator Character TO Voice Unit (default = ,)"
        echo "[-p]\tPort number for listener (default = 10055)"
	echo "[-r]\tSocket receive timeout (seconds) (default 10)"
        echo "[-t]\tNo. of threads pool to create"
        echo "[-T]\tOracle trace level (1, 4, 8, 12)"
	echo "[-m]\tStack Size = m * 512K (default 1)"
	echo "[-n]\tInstance number (valid values 1 to 15)"
        echo "[-L]\tPackage logging level (1 to 5)"
        echo ""
}


###
# Main
###

PROG="`basename $0`"
DATE="`date +'%Y%m%d_%H%M%S'`"

LOG_LEVEL_ARG="FALSE"
DEBUG_MODE="FALSE"
FILE_ARG="FALSE"
PORT_ARG="FALSE"
IN_ARG="FALSE"
OUT_ARG="FALSE"
ARGSTR=""
LOGFILE=""
STACK_ARG="FALSE"
STACK_MULT=""
INSTANCE_ARG="FALSE"
INSTANCE=""
ALL_LOGGING="FALSE"
EXTENDED_DEBUG_MODE="FALSE"
RECEIVE_TIMEOUT_ARG="FALSE"
RECEIVE_TIMEOUT=""


# Process the command line arguments
while getopts adef:i:m:n:o:p:r:t:T:L:? 2> /dev/null ARG
do
        case $ARG in
                a)      ALL_LOGGING="TRUE";;

                d)      DEBUG_MODE="TRUE";;

                e)      EXTENDED_DEBUG_MODE="TRUE";;

                f)      LOGFILE=$OPTARG
			FILE_ARG="TRUE";;

                i)      IN_DELIMITER=$OPTARG
			IN_ARG="TRUE";;

                m)      STACK_MULT=$OPTARG
			STACK_ARG="TRUE";;

                n)      INSTANCE=$OPTARG
			INSTANCE_ARG="TRUE";;

                o)      OUT_DELIMITER=$OPTARG
			OUT_ARG="TRUE";;

                p)      PORTNUMBER=$OPTARG
			PORT_ARG="TRUE";;

                r)      RECEIVE_TIMEOUT=$OPTARG
			RECEIVE_TIMEOUT_ARG="TRUE";;

                t)      THREADS=$OPTARG
			THREADS_ARG="TRUE";;

                T)      ORATRACE=$OPTARG
			ORATRACE_ARG="TRUE";;

                L)      LOG_LEVEL=$OPTARG
			LOG_LEVEL_ARG="TRUE";;

                ?)      usage
                        exit 1;;
        esac
done

if [ "$ALL_LOGGING" = "TRUE" ]
then
	ARGSTR="-a "
fi

if [ "$DEBUG_MODE" = "TRUE" ]
then
	ARGSTR="$ARGSTR ""-d "
fi

if [ "$EXTENDED_DEBUG_MODE" = "TRUE" ]
then
	ARGSTR="$ARGSTR ""-e "
fi

if [ "$IN_ARG" = "TRUE" ] && [ "$IN_DELIMITER" != "" ]
then
	ARGSTR="$ARGSTR ""-i$IN_DELIMITER"
fi

if [ "$OUT_ARG" = "TRUE" ] && [ "$OUT_DELIMITER" != "" ]
then
	ARGSTR="$ARGSTR ""-o$OUT_DELIMITER"
fi

if [ "$STACK_ARG" = "TRUE" ] && [ "$STACK_MULT" != "" ]
then
	ARGSTR="$ARGSTR ""-m$STACK_MULT"
fi

if [ "$INSTANCE_ARG" = "TRUE" ] && [ "$INSTANCE" != "" ]
then
	ARGSTR="$ARGSTR ""-n$INSTANCE"
fi

if [ "$LOG_LEVEL_ARG" = "TRUE" ] && [ "$LOG_LEVEL" != "" ]
then
	ARGSTR="$ARGSTR ""-L $LOG_LEVEL"
fi

if [ "$RECEIVE_TIMEOUT_ARG" = "TRUE" ] && [ "$RECEIVE_TIMEOUT" != "" ]
then
	ARGSTR="$ARGSTR ""-r$RECEIVE_TIMEOUT"
fi

if [ "$THREADS_ARG" = "TRUE" ] && [ "$THREADS" != "" ]
then
	ARGSTR="$ARGSTR ""-t$THREADS"
fi

if [ "$FILE_ARG" = "TRUE" ]
then
	if [ "$LOGFILE" = "" ]
	then
		if [ -d "$DCS_TMPDIR/$ORACLE_SID" ]
		then
			LOGFILE="$DCS_TMPDIR/$ORACLE_SID/tmnlog_""$DATE"
		else
			LOGFILE="/tmp/tmnlog_""$DATE"
		fi
	fi
else
	if [ -d "$DCS_TMPDIR/$ORACLE_SID" ]
	then
		LOGFILE="$DCS_TMPDIR/$ORACLE_SID/tmnlog_""$DATE"
	else
		LOGFILE="/tmp/tmnlog_""$DATE"
	fi
fi


ARGSTR="$ARGSTR"" -f $LOGFILE"


if [ "$PORT_ARG" = "TRUE" ] && [ "$PORTNUMBER" != "" ]
then
	ARGSTR="$ARGSTR ""-p $PORTNUMBER"
fi

if [ "$ORATRACE_ARG" = "TRUE" ] && [ "$ORATRACE" != "" ]
then
	ARGSTR="$ARGSTR ""-T $ORATRACE"
fi

cd $DCS/server/source/ansi-c/voice/daemon/tmnlsrdae/lis
cmd="tmnlsrdae $ARGSTR"
$cmd &

sleep 5
tail -f $LOGFILE

###
# End
###
